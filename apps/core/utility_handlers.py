from aiogram.exceptions import TelegramBadRequestfrom bot import botfrom utils import text, countTokenOfMessage, constantsfrom .managers import MessageManagerfrom .models import ChatActivityfrom utils.exception import AiogramExceptionfrom utils.tokens import trimMessageTokensfrom utils.translate import translateMessage, getMessageIsTranslate, skipCodeTranslationfrom aiogram import typesfrom .keyboards import feedbackMarkup, messageMarkupfrom ..common.generator import ImageGenerator, GPTRequestfrom ..subscription.managers import ConfigurationManager, SubscriptionManager, LimitManagerclass BaseMessageHandler:    def __init__(self, message: types.Message):        self.message = message        self.chat = message.chat        self.isTranslate = getMessageIsTranslate(message.text)        self.markup = messageMarkup if self.chat.type == "private" and not self.isTranslate else None        self.isPremiumToken = SubscriptionManager.isPremiumToken(self.chat.id)    async def _request_feedback(self):        if ConfigurationManager.getConfigs().isBeta and ChatActivity.get(self.chat.id).allMessages == 10:            await bot.send_message(self.chat.id, text.FEEDBACK_MESSAGE, reply_markup=feedbackMarkup)    async def checkTokenLimit(self):        if countTokenOfMessage(self.message.text) >= 300:            raise AiogramException(userId=self.chat.id, message_text=text.TOKEN_REACHED)    async def checkPermissions(self, messageType: str):        if not LimitManager.checkRequestsDailyLimit(self.chat.id, messageType=messageType):            if self.chat.type in constants.AVAILABLE_GROUP_TYPES:                raise AiogramException(userId=self.chat.id, message_text=text.LIMIT_GROUP_REACHED)            raise AiogramException(userId=self.chat.id, message_text=text.getLimitReached(self.isPremiumToken))    async def sendMessageResponse(self, messageText: str, *args, **kwargs) -> int:        """Sends a message to the user, handling private and group chats differently."""        try:            await bot.send_chat_action(chat_id=self.chat.id, action="typing")            if self.chat.type == "private":                sentMessage = await bot.send_message(self.chat.id, messageText, *args, **kwargs)            else:                sentMessage = await self.message.reply(messageText, *args, **kwargs)        except TelegramBadRequest:            # Fallback to sending a direct message if sending fails            sentMessage = await bot.send_message(self.chat.id, messageText, **kwargs)        return sentMessage.message_idclass ImageMessageHandler(BaseMessageHandler):    def __init__(self, message: types.Message):        super().__init__(message)    async def handle(self):        await self.checkPermissions(messageType='IMAGE')        progressMessageId = await self.sendMessageResponse(messageText=text.PROCESSING_MESSAGE)        try:            images = await ImageGenerator.generate(self.chat.id, self.message.text)            chatActivity = ChatActivity.getOrCreate(self.chat.id)            ChatActivity.update(chatActivity, "todaysImages", chatActivity.todaysImages + 1)            media_group = [types.InputMediaPhoto(media=url) for url in images]            media_group[0].caption = f"\nðŸŒ„ {self.message.text}\n\n@muloqataibot"            await bot.send_media_group(self.chat.id, media=media_group)        except AiogramException as e:            await bot.delete_message(self.chat.id, message_id=progressMessageId)            await bot.send_message(self.chat.id, e.message_text)        except TelegramBadRequest as e:            await bot.send_message(self.chat.id, "Rasm generatsiya qilishda xatolik. Iltimos boshqatan so'rov "                                                 "yuboring!")        finally:            await bot.delete_message(self.chat.id, message_id=progressMessageId)class TextMessageHandler(BaseMessageHandler):    def __init__(self, message: types.Message):        super().__init__(message)    async def handle(self):        await self.checkTokenLimit()        await self.checkPermissions(messageType='GPT')        progressMessageId = await self.sendMessageResponse(messageText=text.PROCESSING_MESSAGE)        try:            userText = translateMessage(self.message.text, to='en', isTranslate=self.isTranslate)            MessageManager.userRole(translatedText=userText, instance=self.message)            messages = await trimMessageTokens(chatId=self.chat.id)            response = await GPTRequest(self.chat.id, self.isPremiumToken).generate(messages)            uzMessage = skipCodeTranslation(response, self.isTranslate)            MessageManager.assistantRole(originalText=response, uzMessage=uzMessage, instance=self.message)            await self.sendMessageResponse(messageText=uzMessage, disable_web_page_preview=True,                                           parse_mode="MARKDOWN", reply_markup=self.markup)        except AiogramException as e:            await self.message.reply(e.message_text, disable_web_page_preview=True, parse_mode="MARKDOWN")        finally:            await bot.delete_message(self.chat.id, progressMessageId)            if self.chat.type == "private":                await self._request_feedback()