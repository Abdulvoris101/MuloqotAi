from bot import botfrom utils import text, countTokenOfMessagefrom .managers import MessageManagerfrom .models import ChatActivityfrom apps.common.exception import ForbiddenExceptionfrom utils.translate import translateMessage, getMessageIsTranslate, skipCodeTranslationfrom aiogram import typesfrom .keyboards import feedbackMarkup, messageMarkupfrom ..common.generator import ImageGenerator, GPTRequestfrom ..common.settings import settingsfrom ..subscription.managers import ConfigurationManager, SubscriptionManager, LimitManagerclass BaseMessageHandler:    def __init__(self, message: types.Message):        self.message = message        self.chat = message.chat        self.isTranslate = getMessageIsTranslate(message.text)        self.markup = messageMarkup if self.chat.type == "private" and not self.isTranslate else None        self.isPremiumToken = SubscriptionManager.isPremiumToken(self.chat.id)    async def _request_feedback(self):        if ConfigurationManager.getConfigs().isBeta and ChatActivity.get(self.chat.id).allMessages == 10:            return await bot.send_message(self.chat.id, text.REQUEST_FEEDBACK_MESSAGE,                                          reply_markup=feedbackMarkup)    async def checkTokenLimit(self):        if countTokenOfMessage(self.message.text) >= 300:            raise ForbiddenException(chatId=self.chat.id, messageText=text.TOKEN_REACHED)    async def checkPermissions(self, messageType: str):        userUsedRequests = LimitManager.getUsedRequests(chatId=self.chat.id, messageType='GPT')        if not LimitManager.checkRequestsDailyLimit(self.chat.id, messageType=messageType):            if self.chat.type in settings.AVAILABLE_GROUP_TYPES:                raise ForbiddenException(chatId=self.chat.id, messageText=text.LIMIT_GROUP_REACHED)            raise ForbiddenException(chatId=self.chat.id,                                     messageText=text.getLimitReached(userUsedRequests,                                                                      self.isPremiumToken))    async def sendMessageResponse(self, messageText: str, *args, **kwargs) -> None:        """Sends a message to the user, handling private and group chats differently."""        await bot.send_chat_action(chat_id=self.chat.id, action="typing")        if self.chat.type == "private":            await bot.send_message(self.chat.id, messageText, *args, **kwargs)        else:            await self.message.reply(messageText, *args, **kwargs)class ImageMessageHandler(BaseMessageHandler):    def __init__(self, message: types.Message):        super().__init__(message)    async def handle(self):        await self.checkPermissions(messageType='IMAGE')        images = await ImageGenerator.generate(self.chat.id, self.message.text)        MessageManager.addImage(query=self.message.text, chat=self.message.chat)        media_group = [types.InputMediaPhoto(media=url) for url in images]        media_group[0].caption = text.IMAGE_RESPONSE_TEMPLATE.format(caption=self.message.text)        await bot.send_media_group(self.chat.id, media=media_group)class TextMessageHandler(BaseMessageHandler):    def __init__(self, message: types.Message):        super().__init__(message)        self.userText = translateMessage(self.message.text, to='en', isTranslate=self.isTranslate)    async def handle(self):        await self.checkTokenLimit()        await self.checkPermissions(messageType='GPT')        MessageManager.addMessage(content=self.userText, uzMessage=self.message.text,                                  chat=self.message.chat, role='user')        messages = MessageManager.getLimitedMessages(chatId=self.chat.id, maxTokens=400)        response = await GPTRequest(chatId=self.chat.id, isPremium=self.isPremiumToken).generate(messages)        uzMessage = skipCodeTranslation(response, self.isTranslate)        MessageManager.addMessage(content=response, uzMessage=uzMessage,                                  chat=self.message.chat, role='assistant')        await self.sendMessageResponse(messageText=uzMessage, disable_web_page_preview=True,                                       parse_mode="MARKDOWN", reply_markup=self.markup)        if self.chat.type == "private":            await self._request_feedback()