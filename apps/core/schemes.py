from datetime import datetimefrom enum import Enumfrom typing import Optional, Listfrom pydantic import BaseModel, Field, validator, field_validatorclass ChatType(Enum):    PRIVATE = "private"    SUPERGROUP = "supergroup"    GROUP = "group"class ChatGptRole(Enum):    USER = "user"    SYSTEM = "system"    ASSISTANT = "assistant"class ChatActivityBase(BaseModel):    chatId: int    outputTokens: int = 0    inputTokens: int = 0    allMessages: int = 0    todaysImages: int = 0    todaysMessages: int = 0    translatedMessagesCount: int = 0class ChatActivityScheme(ChatActivityBase):    id: int    class Config:        from_attributes = Trueclass ChatActivityCreateScheme(BaseModel):    chatId: intclass ChatActivityGetScheme(ChatActivityBase):    passclass ChatBase(BaseModel):    chatId: int = Field(alias='id')    chatName: str = Field(alias='first_name')    chatType: ChatType = Field(alias='type')    username: Optional[str]    createdAt: datetime = datetime.now()    lastUpdated: datetime = datetime.now()    @field_validator('chatType')    def convert_chat_type(cls, v):        if isinstance(v, str):            return ChatType(v.lower())        return vclass ChatScheme(ChatBase):    id: int    chatActivity: List[ChatActivityScheme] = []class ChatCreateScheme(ChatBase):    passclass MessageBase(BaseModel):    content: str = Field(alias='text')    role: Optional[ChatGptRole] = None    uzMessage: Optional[str] = None    chat: ChatBase    createdAt: datetime = datetime.now()class MessageScheme(MessageBase):    id: intclass MessageCreateScheme(MessageBase):    pass