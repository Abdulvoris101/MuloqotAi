from datetime import datetimefrom enum import Enumfrom typing import Optional, List, Any, TypeVar, Genericfrom pydantic import BaseModel, Field, validator, field_validator, computed_fieldimport jsonclass ChatType(Enum):    PRIVATE = "private"    SUPERGROUP = "supergroup"    GROUP = "group"class ModelEnum(Enum):    GPT3 = "gpt-3.5-turbo-0125"    GPT4 = "gpt-4"    LEXICA = "lexica"class ChatGptRole(Enum):    USER = "user"    SYSTEM = "system"    ASSISTANT = "assistant"class MessageType(Enum):    MESSAGE = "message"    IMAGE = "image"class ChatCurrentGptModel(Enum):    GPT3 = "gpt-3.5-turbo-0125"    GPT4 = "gpt-4"class ChatActivityBase(BaseModel):    chatId: int    allMessages: int = 0    translatedMessagesCount: int = 0class ChatActivityScheme(ChatActivityBase):    id: int    class Config:        from_attributes = Trueclass ChatActivityCreateScheme(BaseModel):    chatId: intclass ChatActivityStats(BaseModel):    currentMonthGpt3Requests: int = 0    currentMonthGpt4Requests: int = 0    currentMonthImageRequests: int = 0    availableGpt3Requests: int = 0    availableGpt4Requests: int = 0    availableImageRequests: int = 0class ChatActivityViewScheme(ChatActivityBase):    stats: ChatActivityStatsclass ChatBase(BaseModel):    chatId: int = Field(alias='id')    chatName: str = Field(alias='full_name')    chatType: ChatType = Field(alias='type')    username: Optional[str]    referralUsers: List[int] = []    createdAt: datetime = datetime.now()    lastUpdated: datetime = datetime.now()    @field_validator('chatType')    def convert_chat_type(cls, v):        if isinstance(v, str):            return ChatType(v.lower())        return vclass ChatScheme(ChatBase):    id: int    currentGptModel: Optional[ChatCurrentGptModel]    chatActivity: List[ChatActivityScheme] = []    @field_validator('referralUsers', mode='before')    @classmethod    def parse_referral_users(cls, v):        if isinstance(v, str):            try:                return json.loads(v)            except json.JSONDecodeError:                raise ValueError("Invalid JSON format for referralUsers")        return v    def toJson(self, fieldName: str):        value = getattr(self, fieldName, None)        return json.dumps(value)    class Config:        populate_by_name = True  # Use this to control behavior globallyclass ChatCreateScheme(ChatBase):    currentGptModel: Optional[ChatCurrentGptModel]class MessageBase(BaseModel):    content: str    role: Optional[ChatGptRole] = None    uzMessage: Optional[str] = None    messageType: Optional[MessageType] = None    chat: ChatBase    tokensCount: int    model: Optional[ModelEnum] = None    isCleaned: Optional[bool]    createdAt: datetime = datetime.now()class MessageScheme(MessageBase):    id: intclass MessageCreateScheme(MessageBase):    isCleaned: Optional[bool] = False