from utils.translate import translateMessagefrom utils import textfrom bs4 import BeautifulSoupfrom apps.core.managers import ChatActivityManagerfrom apps.subscription.managers import FreeApiKeyManager, ConfigurationManagerfrom utils import constantsfrom utils.events import sendErrorfrom utils.exception import AiogramExceptionimport jsonimport aiohttpimport randomimport asyncioclass ImageGenerator:    url = "https://deepdreamgenerator.com/search-text"    @classmethod    def parse(cls, src):        soup = BeautifulSoup(src, "lxml")        images = soup.find_all("img", class_="lazyload")        return [image.get("data-src") for image in images]    @classmethod    async def generate(cls, userId, prompt):        translatedPrompt = translateMessage(prompt, from_='auto', to='en', isTranslate=True).strip()        body = {"q": translatedPrompt, "offset": 0}        try:            async with aiohttp.ClientSession() as session:                async with session.post(                        url=cls.url,                        json=body,                        timeout=aiohttp.ClientTimeout(total=15)) as resp:                    htmlResponse = (await resp.json())["results"]                    images = cls.parse(htmlResponse)        except aiohttp.client.ClientResponseError as e:            raise AiogramException(userId=userId, message_text=text.IMAGE_GEN_ERROR)        except Exception as e:            raise AiogramException(userId=userId, message_text=text.IMAGE_GEN_ERROR)        random.shuffle(images)        return images[:6]class ResponseHandler:    def __init__(self, response, status, chatId):        self.status = status        self.response = response        self.chatId = chatId    async def handleError(self):        error = self.response.get("error", False)        if error:            errorMessage = error['message']            if self.status == 429:                await sendError(f"<b>#error</b>\n{errorMessage}\n\n#user {self.chatId} 429")                raise AiogramException(self.chatId,                                       "Shoshilmang yana 5 sekund ⏳")            else:                raise AiogramException(self.chatId,                                       "Chatgptda uzilish, Iltimos birozdan so'ng yana qayta urinib ko'ring")        raise AiogramException(self.chatId,                               "Shoshilmang yana 5 sekund ⏳")    async def getMessage(self):        choices = self.response.get('choices', False)        if choices:            ChatActivityManager.incrementActivityCount(chatId=self.chatId, column="allMessages")            ChatActivityManager.incrementActivityCount(chatId=self.chatId, column="todaysMessages")            ChatActivityManager.updateTokenCount(chatId=self.chatId, columnName='outputTokens',                                                 message=self.response['choices'][0]['message']['content'])            return self.response['choices'][0]['message']['content']        return await self.handleError()class GPTRequest:    url = "https://api.openai.com/v1/chat/completions"    def _initialize_api_key(self):        try:            self.free_apiKey = FreeApiKeyManager.getApiKey(self.config.apikeyPosition)        except IndexError:            number = 0 if int(self.config.apikeyPosition) + 1 >= FreeApiKeyManager.getMaxNumber() else int(                self.config.apikeyPosition) + 1            ConfigurationManager.updatePosition(number)    def __init__(self, chatId: int, isPremium: bool):        self.chatId = chatId        self.config = ConfigurationManager.getFirst()        self.isPremium = isPremium        self.free_apiKey = None        self.frequency_penalty = 1.5 if isPremium else 1        self._initialize_api_key()        self.apiKey = constants.API_KEY if isPremium else self.free_apiKey.apiKey    async def generate(self, messages):        headers = {"Authorization": f"Bearer {self.apiKey}"}        requestPayload = {            "model": "gpt-3.5-turbo-0125",            "messages": messages,            "max_tokens": 200 if constants.HOST_GROUP_ID == self.chatId else 300,            "frequency_penalty": self.frequency_penalty        }        try:            async with aiohttp.ClientSession(cookie_jar=aiohttp.CookieJar(unsafe=True)) as session:                FreeApiKeyManager.increaseRequest(self.free_apiKey.id)                FreeApiKeyManager.checkAndExpireKey(self.free_apiKey.id)                number = 0 if int(self.config.apikeyPosition) + 1 == FreeApiKeyManager.getMaxNumber() else int(                    self.config.apikeyPosition) + 1                ConfigurationManager.updatePosition(number)                async with session.post(self.url, headers=headers,                                        json=requestPayload) as response:                    response_data = await response.read()                    status = response.status                response_data = json.loads(response_data)                response = ResponseHandler(response_data, status, self.chatId)                response = await response.getMessage()                return response        except aiohttp.ClientError as e:            await sendError(f"<b>#error</b>\n{e}\n\\n#user {self.chatId}")            raise AiogramException(self.chatId,                                   "Shoshilmang yana 5 sekund ⏳")        except Exception as e:            await sendError(f"<b>#error</b>\n{e}\n\\n#user {self.chatId}")            raise AiogramException(self.chatId,                                   "Chatgptda uzilish, Iltimos birozdan so'ng yana qayta urinib ko'ring")